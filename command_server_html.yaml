apiVersion: apps/v1
kind: Deployment
metadata:
  name: command-server-html
  namespace: custom-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: command-server-html
  template:
    metadata:
      labels:
        app: command-server-html
    spec:
      containers:
      - name: command-server-html
        image: docker.io/library/python:3.9-alpine
        command: ["python3", "/app/command_server_rendered.py"]
        volumeMounts:
        - name: script-volume
          mountPath: /app
      volumes:
      - name: script-volume
        configMap:
          name: command-server-html-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: command-server-html-config
  namespace: custom-namespace
data:
  command_server_rendered.py: |
    import http.server
    import socketserver
    import urllib.parse
    import subprocess

    PORT = 8080

    class CommandExecutorHandler(http.server.SimpleHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

            html_form = '''
            <html>
            <body>
                <h2>Command Execution</h2>
                <form method="POST">
                    <label for="command">Enter command:</label><br><br>
                    <input type="text" id="command" name="command" style="width:300px;"><br><br>
                    <input type="submit" value="Execute">
                </form>
                <br>
            </body>
            </html>
            '''
            self.wfile.write(html_form.encode('utf-8'))

        def do_POST(self):
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            post_vars = urllib.parse.parse_qs(post_data.decode('utf-8'))
            command = post_vars.get('command', [''])[0]

            try:
                output = subprocess.check_output(command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
            except subprocess.CalledProcessError as e:
                output = str(e.output)

            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

            html_response = f'''
            <html>
            <body>
                <h2>Command Execution</h2>
                <form method="POST">
                    <label for="command">Enter command:</label><br><br>
                    <input type="text" id="command" name="command" value="{command}" style="width:300px;"><br><br>
                    <input type="submit" value="Execute">
                </form>
                <br>
                <h3>Output:</h3>
                <pre>{output}</pre>
            </body>
            </html>
            '''
            self.wfile.write(html_response.encode('utf-8'))

    with socketserver.TCPServer(("", PORT), CommandExecutorHandler) as httpd:
        print(f"Serving at port {PORT}")
        httpd.serve_forever()
---
apiVersion: v1
kind: Service
metadata:
  name: command-server-html-service
  namespace: custom-namespace
spec:
  type: NodePort
  selector:
    app: command-server-html
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
    nodePort: 30007  # You can change this port to your desired NodePort range
